@page
@model DocenteModel
@{
    ViewData["Title"] = "Docente";
}
<h1>@ViewData["Title"]</h1>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Docente Chat</title>
</head>
<body>
    <div class="general-cont">
        <div class="left-cont">
            <header>
                <select></select>
            </header>
            <main>
                <div class="input-div">
                    <span>
                        <i class='bx bx-search-alt-2'></i>
                    </span>
                    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Buscar grupo">
                </div>
                <section id="mySection">
                    <div class="contenedor-divs">
                        <div class="div-messages">
                            <img src="~/images/iconoperfil.png" alt="foto-sin-perfil">
                            <div class="div-messages__contenido">
                                <div class="usuarios-sms">
                                    <p class="usuario-visto titulo">Grupo Español</p>
                                    <span class="usuario-visto"><button type="button" value="Agregar" data-modal="modalAgregar">Escribir</button></span>
                                </div>
                                <div class="horarios">
                                    <span class="hora-sms">12:20</span>
                                    <span class="horarios__hover">0</span>
                                </div>
                            </div>
                        </div>

                        <div class="div-messages">
                            <img src="~/images/iconoperfil.png" alt="foto-sin-perfil">
                            <div class="div-messages__contenido">
                                <div class="usuarios-sms">
                                    <p class="usuario-visto titulo">Grupo Ingles</p>
                                    <span class="usuario-visto"><button>Escribir</button></span>
                                </div>
                                <div class="horarios">
                                    <span class="hora-sms">12:20</span>
                                    <span class="horarios__hover">0</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

            </main>
        </div>
        <div class="right-cont">
            <img src="~/images/notification.png" alt="cell" />
            <article>
                <h2>Mantente siempre al tanto</h2>
                <div class="modal" id="modalAgregar">
                    <div>
                        <form method="post" data-action="AgregarMensaje">
                            <label>Fecha:</label>
                            <input name="Fecha" type="date" />
                            <label>Mensaje</label>
                            <textarea cols="100" rows="3" style="resize: none; border:none;">

                            </textarea>
                            <input type="submit" value="Agregar" step="0.5" />
                            <input type="button" value="X Cancelar" data-cancel="1" />
                        </form>
                    </div>
                </div>
            </article>
        </div>
    </div>
</body>
</html>

<script>
      function myFunction() {
       var input, filter, section, div, p, i;
       input = document.getElementById("myInput");
       filter = input.value.toUpperCase();
       section = document.getElementById("mySection");
        div = section.getElementsByTagName("div");

    for (i = 0; i < div.length; i++) {
        p = div[i].getElementsByTagName("p")[0];
        if (p) {
            var palabrasEnFiltro = filter.split(' ');
            var hallado = 0;
            for (var filtro of palabrasEnFiltro) {
                if (p.innerHTML.toUpperCase().indexOf(filtro) > -1) {
                    hallado++;
                }
            }

            if (hallado === palabrasEnFiltro.length) {
                div[i].style.display = "";
            } else {
                div[i].style.display = "none";
            }

        }
    }

    }

    //Quiero que me sirva para los 3 modales para agregar, editar y eliminar
    document.addEventListener("click", async function (event) {
        //Quiere decir que al boton que le de click tiene establecido un data-modal.
        if (event.target.dataset.modal) {
            let modal = document.getElementById(event.target.dataset.modal);

            if (!event.target.dataset.modal.includes("Agregar")) {
                //get al elemento que se quiere editar de la base de datos
                let id = event.target.dataset.id;
                var result = await fetch(urlApi + "Mensaje/" + id);

                if (result.ok) {
                    let json = await result.json();
                    console.log(json);

                    let form = modal.querySelector("form");
                    //asignar elementos a form con los datos de json
                    //1
                    //form.elements["NombreCliente"].value=json.nombreCliente;

                    //2
                    for (let i in json) { //recorre las propiedades del arreglo, en cambio for of recorre el valor de las propiedades
                        if (form.elements[i] && i != "fecha") {
                            form.elements[i].value = json[i];
                        }
                    }

                }
                else {
                    console.log(json);
                }
            }


            //Buscar el elemento que tenga el dataset modal para mostrar el modal
            modal.style.display = "block";
            return;
        }
        //si el data-set es cancel
        else if (event.target.dataset.cancel) {
            //Buscamos el elemento mas cercano que tenga el id .modal y lo escondemos.
            event.target.closest(".modal").style.display = "none";
        }
    });

    document.addEventListener("submit", async function (event) {

        //Para cancelar el evento submit, (Override) para poder programar lo que queramos cuando pase un submit
        event.preventDefault();

        let form = event.target;
        //FormData estan todos los names que tiene el formulario.
        //La entada puede ser un arreglo, un FormData, o un mapa.
        //Me crea un objeto JSON que a partir de entradas, en este caso lo hara de las entradas del FormData.
        let json = Object.fromEntries(new FormData(form))
        //Hacemos un fetch a la API y para hacer por POST debemos pasar el RequestInfo y eso va en las llavesitas
        let response = await fetch(urlApi + form.dataset.action, {
            method: form.method,
            //El cuerpo siempre debe ser string no permite enviar un json.
            body: JSON.stringify(json),
            //SI la api te obliga a que le pongas JSON
            headers: {
                "content-type": "application/json",
            }
        });

        //Ver que respondio
        if (response.ok) {
            //Borrar los campos del formulario
            form.reset();
            //Cerrar el modal
            form.closest(".modal").style.display = "none";
            //Actualizar los pedidos.
            mostrarPedidos();
        }
        else if (response.status == 400) {
            //Ver si me regreso un mensaje.
            console.log(response.statusText);
            let error = await response.text();
            alert(error);
        }

    });

 </script>